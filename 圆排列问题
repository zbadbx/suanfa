#include<iostream>
#include<cmath>
#include<algorithm>
using namespace std;

double len=10000;
double x[1000];//圆心横坐标数组
double r[1000];//圆半径数组
int n;//圆的个数
double s[1000];//最小圆排列的半径顺序


double center_X(int i)//得到第i个圆的圆心横坐标
{
    double a = 0;
    double x1=0;
    for (int j = 1; j < i; ++j)
	{
        x1 = x[j] + 2.0 * sqrt(r[j]*r[i]);
        if (x1 > a)
		{
            a = x1;
        }
        else
        {
        	x1 = x1;
		}
    }
    return a;
}
void compute()//计算当前圆排列长度
{
    double b=0;
	double c=0;
    for (int i = 1; i <= n; ++i) 
	{
        if (x[i] - r[i] < b)
		{
            b = x[i] - r[i];
        }
        if (x[i] + r[i] > c)
		{
            c = x[i] + r[i];
        }
    }
    if (c - b < len)
	{
        len = c - b;
        for (int i = 1; i <= n; ++i) 
		{ 
            s[i] = r[i];
        }
    }
}
void backtrack(int i)
{
    if (i > n)
    {
    	compute();
	}
    else
	{
        for (int j = i; j <= n; ++j)
		{
            swap(r[i], r[j]);
            double c1 = center_X(i);
            if (c1 + r[1] + r[i] < len)
			{
                x[i] = c1;
                backtrack(i + 1);
            }
            swap(r[i],r[j]);
        }
    }
}
int main()
{ 
    cout << "输入圆个数：";
    cin >> n;
    cout <<n<<"个圆的半径分别为：";
    for (int i = 1; i <= n; ++i)
	{
        cin >> r[i];
    }
    backtrack(1);
    cout << "最小圆排列长度为：" << len <<endl;
    cout << "最优圆排列的顺序对应的半径为：";
    for (int i = 1; i <= n; ++i)
	{
        cout << s[i] << " ";
    }
	cout << endl;
    return 0;
}
