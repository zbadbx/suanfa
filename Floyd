#include <stdio.h>        
#define INFINITY 65535 

typedef int VertexType;
typedef int EdgeType; 

typedef struct //图的邻接矩阵存储结构
{
    VertexType vexs[4]; //顶点向量  
    EdgeType edges[4][4];  //邻接矩阵 
    int vexnum,arcnum; //顶点数和边数 
}MGraph; 
 
void CreateGraph(MGraph *G) 
{
    int i,j,k,weight;
    int a,b;
    printf("请输入顶点数和边数:");
    scanf("%d,%d",&(G->vexnum),&(G->arcnum));
	printf("请输入顶点名称：");
	for(i=0;i<G->vexnum;i++)
	{
	   getchar();
	   scanf("%d",&(G->vexs[i]));
	}  
	for(i=0;i<G->vexnum;i++) 
	   for(j=0;j<G->vexnum;j++) 
	      if(i==j)
		  {
		  	G->edges[i][j]=0; 
		  } 
		  else
		  G->edges[i][j]=INFINITY;
		  for(k=0;k<G->arcnum;k++) 
		  { 
		  printf("请输入第%d条边的两个顶点名称：",k+1); 
		  scanf("%d,%d",&a,&b); 
		  for(i=0;a!=G->vexs[i];i++); 
		  for(j=0;b!=G->vexs[j];j++); 
		  getchar(); 
		  printf("请输入第%d条边的权值：",k+1); 
		  scanf("%d",&weight);  
		  G->edges[i][j]=weight;
		  }
} 
  
void Floyd(MGraph G,int P[4][4],int D[4][4]) 
{
    int v,w,k; 
    for(v=0;v<G.vexnum;v++)//初始化D和P 
    { 
      for(w=0;w<G.vexnum;w++) 
      {
	     D[v][w]=G.edges[v][w];
		 P[v][w]=w;
	  }
	} 
	for(k=0;k<G.vexnum;k++) 
	{
	   for(v=0;v<G.vexnum;v++)
	   {
	      for(w=0;w<G.vexnum;w++)
		  {
		  if(D[v][w]>(D[v][k]+D[k][w]))
		  {
		     D[v][w]=D[v][k]+D[k][w];
		     P[v][w]=P[v][k]; 
		  }
		  }
	   }
	}
}
 
int main() 
{
    MGraph G; 
    CreateGraph(&G); 
    int i,j; 
    printf("edgesnum:%d\n",G.arcnum); 
    printf("vexesnum:%d\n",G.vexnum); 
    for(i=0;i<4;i++) 
    { 
      for(j=0;j<4;j++) 
      printf("%d ",G.edges[i][j]); 
      printf("\n");
	} 
    int v,w,k; 
    int P[4][4]; 
    int D[4][4]; 
    Floyd(G,P,D); 
    for(v=0;v<G.vexnum;v++) 
    { 
      for(w=0;w<G.vexnum;w++) 
      {
	   if(v!=w)
       printf("v%d to v%d weight:%d ",v,w,D[v][w]); 
       k=P[v][w]; 
       printf("path:%d",v);
       while(k!=w) 
       { 
	    printf("->%d",k); 
        k=P[k][w]; 
       } 
       printf("->%d\n",w); 
      } 
    }
}
